inh attr scope:Scope; 
syn attr type:Type;


nt Main;

prod main: Main ::= ds:Dcls
{
  local s:Scope = mkScope();
  s.vars = ds.vars;
  s.mods = ds.mods;
  s.imps = ds.imps;
  s.lex  = [];
  ds.scope = s;
}


nt Dcls;

attr scope occurs on Dcls;
attr vars occurs on Dcls;
attr mods occurs on Dcls;
attr imps occurs on Dcls;

prod dclsCons: Dcls ::= d:Dcl ds:Dcls
{
  d.scope = this.scope;
  ds.scope = this.scope;
  this.vars = d.vars ++ ds.vars;
  this.mods = d.mods ++ ds.mods;
  this.imps = d.imps ++ ds.imps;
}

prod dclsNil: Dcls ::= {}


nt Dcl;
attr scope occurs on Dcl;
attr vars occurs on Dcl;
attr mods occurs on Dcl;
attr imps occurs on Dcl;

prod dclMod: Dcl ::= id:String ds:Dcls
{
  local s:Scope = mkMod(id);
  s.lex  = [this.scope]; 
  s.imps = ds.imps;
  s.vars = ds.vars;  
  s.mods = ds.mods;
  
  ds.scope = s;

  this.vars = [];
  this.mods = [s];
  this.imps = [];
}

prod dclDcl: Dcl ::= b:Bind
{
  b.scope = this.scope;

  this.vars = b.vars;
  this.mods = [];
  this.imps = [];
}

prod dclImp: Dcl ::= r:ModRef
{
  r.scope = this.scope;
  
  this.vars = [];
  this.mods = [];
  this.imps = r.imps;
}


nt Bind;
attr scope occurs on Bind;
attr vars occurs on Bind;
attr type occurs on Bind;

prod bnd: Bind ::= id:String t:Type e:Exp
{  
  local d:Scope = mkVar(id, t);
  this.type = e.type;
  this.vars = [d];
  e.scope = this.scope;
}


nt ModRef;
attr scope occurs on ModRef;
attr imps occurs on ModRef;

prod mref: ModRef ::= id:String
{ 
  local r:Ref = mkModRef(id);
  r.lex = [this.scope];
  this.imps = r.res;
}


nt VarRef;
attr scope occurs on VarRef;
attr res occurs on VarRef;

prod vref: VarRef ::= id:String
{ 
  local r:Ref = mkVarRef(id);
  r.lex = [this.scope];
  this.res = r.res;
}


nt Exp;
attr scope occurs on Exp;
attr type occurs on Exp;

prod expRef: Exp ::= r:VarRef
{ 
  r.scope = this.scope;

  this.type = 
    if length(r.res) > 0
    then head(r.res).datum.type
    else typeErr()
    end;
}

prod expInt: Exp ::= i:Integer
{
  this.type = typeInt();
}

---------------------------

-- sg library stuff

syn attr res:[Scope];
syn attr lex:[Scope];
syn attr vars:[Scope];
syn attr mods:[Scope];
syn attr imps:[Scope];
syn attr query:([Scope] ::= Ref Scope);
syn attr id:String;
syn attr datum:Datum;


nt Scope;
attr lex occurs on Scope;
attr vars occurs on Scope;
attr imps occurs on Scope;
attr mods occurs on Scope;
attr datum occurs on Scope;

prod mkScope: Scope ::= {
  this.datum = datumNone();
}

prod mkMod: Scope ::= s:String {
  this.datum = datumMod(s);
}

prod mkVar: Scope ::= s:String t:Type {
  this.datum = datumVar(s, t);
}


syn attr str:String;

nt Ref;
attr res occurs on Ref;
attr lex occurs on Ref;
attr str occurs on Ref;

prod mkVarRef: Ref ::= s:String {
  this.res = query(this, varDFA(), head(this.lex)).res;
  this.str = s;
}
prod mkModRef: Ref ::= s:String {
  this.res = query(this, modDFA(), head(this.lex)).res;
  this.str = s;
}


nt Datum;
attr id occurs on Datum;
attr type occurs on Datum;
attr str occurs on Datum;

prod datumVar: Datum ::= id:String t:Type {
  this.type = t;
  this.str = id;
}
prod datumMod: Datum ::= id:String {
  this.type = typeErr();
  this.str = id;
}
prod datumNone: Datum ::= {
  this.type = typeErr();
  this.str = "";
}


nt Query;
attr res occurs on Query;

prod query: Query ::= r:Ref d:DFA s:Scope {}

syn attr decls:([Scope] ::= Ref Scope);


nt DFA;
attr decls occurs on DFA;

prod varDFA: DFA ::= {

}

prod modDFA: DFA ::= {

}


nt DFAState;
attr decls occurs on DFAState;

prod dfaState: DFAState ::= {
  this.decls = \r:Ref s:Scope ->
    let varRes:[Scope] = this.varT.decls(r, map((\s:Scope -> s.var), s)) in
    let modRes:[Scope] = this.modT.decls(r, map((\s:Scope -> s.mod), s)) in
    let impRes:[Scope] = this.impT.decls(r, map((\s:Scope -> s.imp), s)) in
    let lexRes:[Scope] = this.lexT.decls(r, map((\s:Scope -> s.lex), s)) in

    if !null(varRes) then varRes
    else if !null(modRes) then modRes
    else if !null(impRes) then impRes
    else lexRes
    end end end

    end end end end
  ;

}

prod dfaStateFinal: DFAState ::= {
  this.decls = \r:Ref s:Scope ->
    if r.str == s.datum.str 
      then [s]
      else []
    end
  ;
}

prod dfaStateSink: DFAState ::= {
  top.decls = \r:Ref d:DFA -> [];
}



---------------------------

-- other
-- implement polymorphic lists later

nt List;

prod head: List ::= ss:[Scope]
{}

prod length: List ::= ss:[Scope]
{}

---------------------------

-- types

nt Type;

prod typeInt: Type ::= {}
prod typeBool: Type ::= {}
prod typeErr: Type ::= {}